name: dripip
description: Use Dripip to automate package releases in your CI.
inputs:
  isStable:
    required: false
    description: Is this a stable release? Values can be 'true' or 'false'. By default is 'false'.
  extraFlags:
    required: false
    description: Extra CLI flags to append to the executed CLI command.
  npmToken:
    required: true
    description: The NPM token that will be used to publish the package to the npm registry.
  githubToken:
    required: true
    description: The GitHub token that will be used to create a GitHub release on the repository.

runs:
  using: composite
  steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    - uses: actions/setup-node@v3
      with:
        node-version: 18.x
    - name: Install Dependencies
      shell:  bash
      run: |
        corepack enable

        if [ -f "pnpm-lock.yaml" ]; then
          pnpm install
        elif [ -f "package-lock.json" ]; then
          npm install
        elif [ -f "yarn.lock" ]; then
          yarn_version=$(yarn --version)
          yarn_version_major=${yarn_version:0:1}

          if [ "${yarn_version_major}" = '1' ]; then
            yarn install --immutable
          else
            yarn install --frozen-lockfile
          fi
        else
          echo "Could not detect which package manager is being used."
          exit 1
        fi
        
    # TODO Do not assume that dripip is locally installed.
    - name: Publish Release
      shell:  bash
      env:
        NPM_TOKEN: ${{inputs.npmToken}}
        GITHUB_TOKEN: ${{inputs.githubToken}}
      run: |
        if [ '${{inputs.isStable}}' = 'true' ]; then
          sub_command='stable'
        else
          sub_command='preview-or-pr'
        fi

        if [ -f "pnpm-lock.yaml" ]; then
          pnpm dripip ${sub_command} --json ${{inputs.extraFlags}}
        elif [ -f "package-lock.json" ]; then
          npx dripip ${sub_command} --json ${{inputs.extraFlags}}
        elif [ -f "yarn.lock" ]; then
          yarn_version=$(yarn --version)
          yarn_version_major=${yarn_version:0:1}

          if [ "${yarn_version_major}" = '1' ]; then
            silent_flag='--silent'
          else
            silent_flag=''
          fi

          yarn ${silent_flag} dripip ${sub_command} --json ${{inputs.extraFlags}}
        else
          echo "Could not detect which package manager is being used."
          exit 1
        fi
